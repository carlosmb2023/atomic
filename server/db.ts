// Importa√ß√µes necess√°rias
import { drizzle } from 'drizzle-orm/neon-serverless';
import { neon, neonConfig } from '@neondatabase/serverless';
import { sql } from 'drizzle-orm';
import * as schema from '../shared/schema';
import { log } from './vite';
import pkg from 'pg';
import ws from 'ws';
const { Pool } = pkg;

// Configurar websocket para Neon
neonConfig.webSocketConstructor = ws;

// Vari√°vel para armazenar a inst√¢ncia do banco de dados
let db: any;
let dbInitialized = false;

// Fun√ß√£o para detectar o tipo de conex√£o (Neon vs PostgreSQL padr√£o)
function isNeonConnection(url: string): boolean {
  return url.includes('neon') || url.startsWith('postgres://db.') || url.includes('.neon.tech');
}

// Fun√ß√£o para inicializar o banco de dados
async function initDatabase() {
  try {
    // Se o banco j√° foi inicializado, retornar para evitar inicializa√ß√µes m√∫ltiplas
    if (dbInitialized) return true;
    
    const connectionString = process.env.DATABASE_URL;
    
    if (!connectionString) {
      log('‚ö†Ô∏è Vari√°vel DATABASE_URL n√£o definida, usando armazenamento em mem√≥ria', 'warn');
      return false;
    }
    
    try {
      // Determinar se estamos usando Neon ou Postgres padr√£o
      if (isNeonConnection(connectionString)) {
        // Usar o cliente Neon com WebSocket e HTTP fallback
        log('üåê Tentando conex√£o com Neon Serverless');
        
        // Criar cliente SQL com Neon
        const sqlClient = neon(connectionString);
        
        // Criar a inst√¢ncia do Drizzle ORM com a tipagem correta
        db = drizzle(sqlClient as any, { schema });
      } else {
        // Usar conex√£o PostgreSQL padr√£o
        log('üåê Tentando conex√£o com PostgreSQL padr√£o');
        
        // Criar pool de conex√µes
        const pool = new Pool({
          connectionString,
          ssl: process.env.NODE_ENV === 'production'
        });
        
        // Testar a conex√£o com uma query simples
        const client = await pool.connect();
        try {
          const res = await client.query('SELECT NOW()');
          log(`‚úÖ Conex√£o PostgreSQL estabelecida: ${res.rows[0].now}`);
        } finally {
          client.release();
        }
        
        // Criar a inst√¢ncia do Drizzle ORM
        db = drizzle(pool as any, { schema });
      }
      
      // Marcar banco como inicializado
      dbInitialized = true;
      
      log('‚úÖ Banco de dados inicializado com sucesso');
      return true;
    } catch (error) {
      log(`‚ùå Erro ao inicializar banco de dados: ${error}`, 'error');
      return false;
    }
  } catch (error) {
    log(`‚ùå Erro ao inicializar banco de dados: ${error}`, 'error');
    return false;
  }
}

// Tentar inicializar o banco de dados na importa√ß√£o
(async () => {
  try {
    await initDatabase();
  } catch (error) {
    log(`‚ùå Falha ao conectar ao banco de dados: ${error}`, 'error');
  }
})().catch(err => log(`‚ùå Falha na inicializa√ß√£o ass√≠ncrona: ${err}`, 'error'));

/**
 * Testa a conex√£o com o banco de dados
 */
export async function testConnection() {
  try {
    if (!db) {
      log('‚ùå Cliente de banco de dados n√£o inicializado', 'error');
      return false;
    }
    
    // Tenta executar uma query simples para verificar a conex√£o
    try {
      // Tenta com drizzle
      const testResult = await db.execute(sql`SELECT 1 AS test_value`);
      log('üîå Conex√£o com o banco de dados estabelecida com sucesso');
      
      try {
        // Verifica se a tabela de configura√ß√µes existe
        const configResult = await db.select().from(schema.systemConfig).limit(1);
        log(`Configura√ß√µes encontradas: ${configResult.length}`);
        return true;
      } catch (error) {
        // Tabela pode n√£o existir ainda, o que √© normal em um primeiro uso
        log(`‚ÑπÔ∏è Tabela de configura√ß√µes n√£o encontrada: ${error}`, 'info');
        return true; // Retorna verdadeiro pois a conex√£o est√° OK
      }
    } catch (queryError) {
      // Falha na query b√°sica significa problema de conex√£o
      log(`‚ùå Erro ao testar conex√£o com o banco: ${queryError}`, 'error');
      return false;
    }
  } catch (error) {
    log(`‚ùå Erro ao testar conex√£o com o banco de dados: ${error}`, 'error');
    return false;
  }
}

/**
 * Configura o banco de dados para uso
 */
export async function setupDatabase() {
  try {
    const connected = await testConnection();
    if (!connected) {
      return false;
    }
    
    // Verificar se existe uma configura√ß√£o do sistema
    const configs = await db.select().from(schema.systemConfig).limit(1);
    
    if (configs.length === 0) {
      // Criar configura√ß√£o inicial
      await db.insert(schema.systemConfig).values({
        execution_mode: 'local',
        local_llm_url: 'http://127.0.0.1:11434',
        cloud_llm_url: 'https://oracle-api.carlosdev.app.br',
        base_prompt: 'Voc√™ √© um assistente √∫til e profissional que responde de maneira concisa e clara.',
        logs_enabled: true,
        active_llm_url: 'http://127.0.0.1:11434'
      });
      
      log('‚úÖ Configura√ß√£o inicial criada com sucesso');
    }
    
    log('‚úÖ Banco de dados configurado com sucesso');
    return true;
  } catch (error) {
    log(`‚ùå Erro ao configurar banco de dados: ${error}`, 'error');
    return false;
  }
}

// Exportar a inst√¢ncia do banco de dados para uso em outros m√≥dulos
export { db };