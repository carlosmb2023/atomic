// Importa√ß√µes necess√°rias
import { drizzle } from 'drizzle-orm/neon-serverless';
import { neon, neonConfig } from '@neondatabase/serverless';
import { sql } from 'drizzle-orm';
import * as schema from '../shared/schema';
import { log } from './vite';
import pkg from 'pg';
const { Pool } = pkg;

// Habilitar cache de conex√£o para melhor desempenho
neonConfig.fetchConnectionCache = true;

// Vari√°vel para armazenar a inst√¢ncia do banco de dados
let db: any;

// Fun√ß√£o para detectar o tipo de conex√£o (Neon vs PostgreSQL padr√£o)
function isNeonConnection(url: string): boolean {
  return url.includes('neon') || url.startsWith('postgres://db.') || url.includes('.neon.tech');
}

// Fun√ß√£o para inicializar o banco de dados
function initDatabase() {
  try {
    const connectionString = process.env.DATABASE_URL;
    
    if (!connectionString) {
      log('‚ö†Ô∏è Vari√°vel DATABASE_URL n√£o definida', 'error');
      throw new Error('DATABASE_URL n√£o definida');
    }
    
    // Determinar o tipo de conex√£o e inicializar adequadamente
    if (isNeonConnection(connectionString)) {
      log('üåê Usando conex√£o Neon Serverless');
      const sqlClient = neon(connectionString);
      db = drizzle(sqlClient);
    } else {
      log('üè† Usando conex√£o PostgreSQL padr√£o');
      const pool = new Pool({ connectionString });
      
      // Importar dinamicamente para evitar erros de importa√ß√£o
      try {
        // Tentar usar drizzle-orm/node-postgres
        const { drizzle: drizzlePg } = require('drizzle-orm/node-postgres');
        db = drizzlePg(pool);
      } catch (e) {
        // Fallback para postgres-js
        log('‚ö†Ô∏è Fallback para postgres-js', 'warn');
        const { drizzle: drizzlePgJs } = require('drizzle-orm/postgres-js');
        db = drizzlePgJs(pool);
      }
    }
    
    log('‚úÖ Banco de dados inicializado');
    return true;
  } catch (error) {
    log(`‚ùå Erro ao inicializar banco de dados: ${error}`, 'error');
    return false;
  }
}

// Tentar inicializar o banco de dados na importa√ß√£o
try {
  initDatabase();
} catch (error) {
  log(`‚ùå Falha ao conectar ao banco de dados: ${error}`, 'error');
}

/**
 * Testa a conex√£o com o banco de dados
 */
export async function testConnection() {
  try {
    if (!db) {
      log('‚ùå Cliente de banco de dados n√£o inicializado', 'error');
      return false;
    }
    
    // Executar uma consulta simples para testar a conex√£o
    const result = await db.execute(sql`SELECT NOW()`);
    log('üîå Conex√£o com o banco de dados estabelecida com sucesso');
    return true;
  } catch (error) {
    log(`‚ùå Erro ao testar conex√£o com o banco de dados: ${error}`, 'error');
    return false;
  }
}

/**
 * Configura o banco de dados para uso
 */
export async function setupDatabase() {
  try {
    const connected = await testConnection();
    if (!connected) {
      return false;
    }
    
    // Verificar se existe uma configura√ß√£o do sistema
    const configs = await db.select().from(schema.systemConfig).limit(1);
    
    if (configs.length === 0) {
      // Criar configura√ß√£o inicial
      await db.insert(schema.systemConfig).values({
        execution_mode: 'local',
        local_llm_url: 'http://127.0.0.1:11434',
        cloud_llm_url: 'https://oracle-api.carlosdev.app.br',
        base_prompt: 'Voc√™ √© um assistente √∫til e profissional que responde de maneira concisa e clara.',
        logs_enabled: true,
        active_llm_url: 'http://127.0.0.1:11434'
      });
      
      log('‚úÖ Configura√ß√£o inicial criada com sucesso');
    }
    
    log('‚úÖ Banco de dados configurado com sucesso');
    return true;
  } catch (error) {
    log(`‚ùå Erro ao configurar banco de dados: ${error}`, 'error');
    return false;
  }
}

// Exportar a inst√¢ncia do banco de dados para uso em outros m√≥dulos
export { db };